import numpy as np
import re
import random


def createVocab_List(dataSet):
vocab_Set = set([])  
    for document in dataSet:
        vocab_Set = vocab_Set | set(document)  # 取并集
    return list(vocab_Set)


def setOfWords2Vec(Vocab_List, inputSet):
    Vector = [0] * len(Vocab_List)  # 创建一个其中所含元素都为0的向量
    for word in inputSet:  # 遍历每个词条
        if word in Vocab_List:  # 如果词条存在于Vocab_List中，则置1
            Vector[Vocab_List.index(word)] = 1
        else:
            print("the word: %s is not in my Vocabulary!" % word)
return Vector 

def trainNB(trainMatrix, trainCategory):
    numTrainDocs = len(trainMatrix)  # 计算训练的文档数目
    numWords = len(trainMatrix[0])  # 计算每篇文档的词条数
    pAbusive = sum(trainCategory) / float(numTrainDocs)  # 文档属于垃圾邮件类的概率
    p0Num = np.ones(numWords)
    p1Num = np.ones(numWords)  # 创建numpy.ones数组,词条出现数初始化为1,拉普拉斯平滑
    p0Denom = 2.0
    p1Denom = 2.0  # 分母初始化为2 ,拉普拉斯平滑
for i in range(numTrainDocs):
     if trainCategory[i] == 1:
            p1Num += trainMatrix[i]
            p1Denom += sum(trainMatrix[i])
        else: 
            p0Num += trainMatrix[i]
            p0Denom += sum(trainMatrix[i])

    p1Vect = np.log(p1Num / p1Denom)
p0Vect = np.log(p0Num / p0Denom) 
    return p0Vect, p1Vect, pAbusive  


def classify(vec2Classify, p0Vec, p1Vec, pClass1):
    pro1 = sum(vec2Classify*p1Vec)+np.log(pClass1)
    pro0 = sum(vec2Classify*p0Vec)+np.log(1.0-pClass1)
    if pro1 > pro0:
        return 1
    else:
        return 0

def DivWord(bigString):  # 分词
words = re.split(r'\W+', bigString)  # 将特殊符号作为切分标志进行切分
   # 除了单个字母，例如大写的I，其它单词变成小写
    return [word.lower() for word in words if len(word) > 2]

def spamTest():
    docList = []
    classList = []
    fullText = []
for i in range(1, 26):  
        # 读取每个垃圾邮件
        wordList = DivWord(
            open('/Users/yanchenhao/Desktop/email/spam/%d.txt' % i, 'r').read())
        # wordlist = [a,b,c,d,c,a,]
        docList.append(wordList)
        fullText.append(wordList)
        classList.append(1) 
        # 读取每个非垃圾邮件
        wordList = DivWord(
            open('/Users/yanchenhao/Desktop/email/ham/%d.txt' % i, 'r').read())
        docList.append(wordList)
        fullText.append(wordList)
        classList.append(0)
 
    ################### doclist = dataset
Vocab_List = createVocab_List(docList)  # 创建词汇表，不重复

trainingSet = list(range(50)) 
    testSet = []  # 训练集的索引值的列表和测试集的索引值的列表

    for i in range(5):  #  40个训练集,10个测试集
        randIndex = int(random.uniform(0, len(trainingSet)))  # 随机选取索索引值
        testSet.append(trainingSet[randIndex])  # 添加测试集的索引值
        del (trainingSet[randIndex])  # 在训练集列表中删除添加到测试集的索引值

    # 测试集
    trainMat = []
trainClasses = [] 
    for docIndex in trainingSet:  # 遍历训练集
        # 将生成的词集模型添加到训练矩阵中
        trainMat.append(setOfWords2Vec(Vocab_List, docList[docIndex]))
        trainClasses.append(classList[docIndex])  # 将类别添加到训练集类别标签系向量中

    p0V, p1V, pSpam = trainNB(
        np.array(trainMat), np.array(trainClasses))  # 训练朴素贝叶斯模型

    errorCount = 0  # 错误分类计数

    for docIndex in testSet:  # 遍历测试集
        wordVector = setOfWords2Vec(Vocab_List, docList[docIndex])  # 测试集的词集模型
        # 如果分类错误
        if classify(np.array(wordVector), p0V, p1V, pSpam) != classList[docIndex]:
            errorCount += 1  # 错误计数加1
            print("分类错误的测试集：", docList[docIndex])

    print('\n error rate：%.2f%%' % (float(errorCount) / len(testSet) * 100))

if __name__ == '__main__':
    spamTest()
